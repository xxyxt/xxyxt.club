<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>下雪不下雨的个人博客</title>
  
  <subtitle>to be a learner</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xxyxt.github.io/"/>
  <updated>2019-01-15T06:54:26.690Z</updated>
  <id>https://xxyxt.github.io/</id>
  
  <author>
    <name>xxyxt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>static this 关键字的用法</title>
    <link href="https://xxyxt.github.io/2019/01/15/this-static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://xxyxt.github.io/2019/01/15/this-static关键字/</id>
    <published>2019-01-15T02:24:03.984Z</published>
    <updated>2019-01-15T06:54:26.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this-关键字的用法"><a href="#this-关键字的用法" class="headerlink" title="this 关键字的用法"></a>this 关键字的用法</h2><p>Java开发离不开关键字this,this有三类用法：</p><h3 id="调用本类属性"><a href="#调用本类属性" class="headerlink" title="调用本类属性"></a>调用本类属性</h3><p>为了避免类的<strong>属性名称</strong>和<strong>方法参数名称</strong>的重复，需要用<strong>this.</strong>属性的形式，来明确指明调用的是属性而不是参数<br>注：为了避免不必要的麻烦，在访问类的属性时，不管名称重复与否，都加上this关键字</p><h3 id="调用本类方法"><a href="#调用本类方法" class="headerlink" title="调用本类方法"></a>调用本类方法</h3><p>类中的方法主要有两种：普通和构造方法。所以调用本类方法也有两种形式：</p><ul><li><p>普通方法：this.方法()</p></li><li><p>构造方法：this()</p><p>注：用this(),可以很好解决构造方法中的代码重复问题</p></li></ul><h3 id="表示当前对象"><a href="#表示当前对象" class="headerlink" title="表示当前对象"></a>表示当前对象</h3><ul><li>表示当前调用类中方法的实例化对象</li></ul><h2 id="static-关键字的用法"><a href="#static-关键字的用法" class="headerlink" title="static 关键字的用法"></a>static 关键字的用法</h2><h3 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h3><ul><li>在声明属性前加上static关键字，表示公共属性</li><li><p>公共属性，任何一个对象修改了此属性的内容都会影响其他的对象。好比一个人有多个名字，小张、狗蛋、二狗子，如果小张的腿摔断了，那么狗蛋和二狗子的腿也会摔断，因为他们是同一个人</p></li><li><p>static定义的属性保存在<strong>全局数据区</strong></p></li><li><p>static定义的属性可以由类直接调用，而非static属性必须在实例化对象之后，由对象调用</p></li><li><p>定义共享属性的时候才会使用static，一般情况都是使用非属性</p></li></ul><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>和定义属性一样，使用static定义普通方法时，没有经过实例化产生对象可以直接由类名直接调用</p><p>注意：</p><ul><li>static方法不能直接访问非static方法或属性</li><li>非static方法可以直接调用或访问static方法</li></ul><p>原因：</p><ul><li>非static结构在实例化对象之后才会分配堆空间，才可以使用</li><li>static不受实例化对象的控制</li></ul><h2 id="public-static-void-main-String-args"><a href="#public-static-void-main-String-args" class="headerlink" title="public static void main(String args[])"></a>public static void main(String args[])</h2><p>刚刚开始接触java时，感觉这个一大串好长，每个部分究竟各自代表什么意义，不写其中的任何一项可不可以</p><ul><li>public：表示此方法对任何操作都是可见的</li><li>static：此类方法由类名直接调用</li><li>void: 表示返回值为空</li><li>main: 规定的名称</li><li>String args[]: 程序运行时传递的参数，java类名 参数 参数 参数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this-关键字的用法&quot;&gt;&lt;a href=&quot;#this-关键字的用法&quot; class=&quot;headerlink&quot; title=&quot;this 关键字的用法&quot;&gt;&lt;/a&gt;this 关键字的用法&lt;/h2&gt;&lt;p&gt;Java开发离不开关键字this,this有三类用法：&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://xxyxt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://xxyxt.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java类的继承性</title>
    <link href="https://xxyxt.github.io/2019/01/15/Java%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E6%80%A7/"/>
    <id>https://xxyxt.github.io/2019/01/15/Java类的继承性/</id>
    <published>2019-01-15T01:56:27.641Z</published>
    <updated>2019-01-15T02:19:02.691Z</updated>
    
    <content type="html"><![CDATA[<p>继承性是面向对象的一个主要特征，主要解决了代码的重复利用的问题，利用继承性可以从已有的类中派生新的子类，也可以利用子类扩展出更多的操作<br>语法实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>继承性的限制：<br>限制一：不可以多重继承，可以多层继承</p><ul><li>class A extends C,D    错误</li><li>class A{}    class B extends A{}    class C extends B{}</li><li>继承的层次不要过多<br>限制二：子类继承父类，会继承父类的全部操作，但是对于对于私有操作属于隐式继承，非私有操作属于显示继承<br>限制三：子类对象构造前，一定会默认调用<strong>父类的构造</strong>，父类对象先实例化，子类对象后实例化，所以子类对象相当于隐含了super()的 语句调用</li><li>注：父类中提供无参构造时，是否编写super()没有区别，如果没有无参构造，则必须明确使用super()调用父类指定的构造方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继承性是面向对象的一个主要特征，主要解决了代码的重复利用的问题，利用继承性可以从已有的类中派生新的子类，也可以利用子类扩展出更多的操作&lt;br&gt;语法实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://xxyxt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://xxyxt.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="https://xxyxt.github.io/2019/01/14/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%87%A0%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <id>https://xxyxt.github.io/2019/01/14/二叉树的几种遍历方法/</id>
    <published>2019-01-14T12:02:20.000Z</published>
    <updated>2019-01-14T12:13:12.716Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二叉树的遍历指按照一定的顺序访问二叉树的所有节点</strong></p><p>访问方法一共四种：先序遍历，中序遍历，后续遍历，层序遍历<br>前三种遍历一般用DFS方法，层序遍历需要BFS方法<br>先、中、后序遍历，都是指的根节点的访问顺序<br>先序代码：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void preorder(node* root)</span><br><span class="line">&#123;</span><br><span class="line">if(root==NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;root-&gt;data;</span><br><span class="line">preorder(root-&gt;left);</span><br><span class="line">preorder(root-&gt;right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>中序代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void inorder(node* root)</span><br><span class="line">&#123;</span><br><span class="line">if(root==NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">inorder(root-&gt;left);</span><br><span class="line">cout&lt;&lt;root-&gt;data;</span><br><span class="line">inorder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后续代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void postorder(node* root)</span><br><span class="line">&#123;</span><br><span class="line">if(root==NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">postorder(root-&gt;left);</span><br><span class="line">postorder(root-&gt;right);</span><br><span class="line">cout&lt;&lt;root-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>层序遍历，是按照层次的顺序，访问节点，采用广度优先的访问方法结合队列实现操作，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void layerorder(node* root)</span><br><span class="line">&#123;</span><br><span class="line">queue&lt;node*&gt; q;</span><br><span class="line">q.push(root);</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node* now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">cout&lt;&lt;now-&gt;data;</span><br><span class="line">if(now-&gt;left!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">q.push(now-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">if(now-&gt;right!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">q.push(now-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;二叉树的遍历指按照一定的顺序访问二叉树的所有节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问方法一共四种：先序遍历，中序遍历，后续遍历，层序遍历&lt;br&gt;前三种遍历一般用DFS方法，层序遍历需要BFS方法&lt;br&gt;先、中、后序遍历，都是指的根节点的访问顺序&lt;br&gt;先序代码：&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://xxyxt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="https://xxyxt.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="https://xxyxt.github.io/2019/01/12/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://xxyxt.github.io/2019/01/12/最长回文子串/</id>
    <published>2019-01-12T06:57:24.000Z</published>
    <updated>2019-01-12T07:01:14.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>给出一个字符串S，求S的最长回文子串的长度。</p><p>例：字符串“ASDFGHGFDSB”的最长回文子串为“SDFGHGFDS”，长度为9。</p><p>显然暴力解法的不仅复杂度较大，而且超级繁琐，采用动态规划可以更好的解决这类问题<br><a id="more"></a></p><p>令dp[i][j]表示S[i]至S[j]所表示的子串是否回文，是则为1，不是则为0.这样可以根据S[i]和S[j]是否相等分为两种情况：</p><ol><li>如果S[i]==S[j]，那么只要S[i+1]至S[j-1]是回文子串，那么S[i]至S[j]也是回文子串；如果S[i+1]至S[j-1]不是回文子串，那么S[i]至S[j]也不是回文子串；</li><li>如果S[i]!=S[j]，那么S[i]至S[j]一定不是回文子串<br>边界：dp[i][i]=1, dp[i][i+1]=(S[i]==S[i+1])?1:0</li></ol><p><strong>注意：如果按照i和j从小到大的顺序来枚举子串的端点，然后更新dp[i][j]，这样会无法保证dp[i+1][j-1]已经得到计算，从而无法进行状态转移</strong>。</p><p>因为边界的子串长度为1和2，所以可以考虑按照子串的长度和初始位置进行枚举，即第一遍将子串长度为3的dp值全部求出来，第二遍计算长度为4的子串可以通过计算出的长度为3的子串的dp值进行计算。这样问题就可以得到解决</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">const int maxn = 10010;</span><br><span class="line">char S[maxn];</span><br><span class="line">int dp[maxn][maxn];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">gets(S);</span><br><span class="line">int len = strlen(S);</span><br><span class="line">int ans = 1; //初始化最长回文子串长度为1 </span><br><span class="line">memset(dp, 0, sizeof(dp));</span><br><span class="line">for (int i = 0; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i] = 1;</span><br><span class="line">if (i &lt; len - 1)</span><br><span class="line">&#123;</span><br><span class="line">if (S[i] == S[i + 1])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i + 1] = 1;</span><br><span class="line">ans = 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//状态转移方程</span><br><span class="line">for (int L = 3; L &lt;= len; L++)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i + L - 1 &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">int j = i + L - 1;</span><br><span class="line">if (S[i] == S[j] &amp;&amp; dp[i + 1][j - 1] == 1)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = 1;</span><br><span class="line">ans = L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h3><p><a href="https://www.nowcoder.com/practice/12e081cd10ee4794a2bd70c7d68f5507?tpId=37&amp;tqId=21308&amp;tPage=5&amp;rp=&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/12e081cd10ee4794a2bd70c7d68f5507?tpId=37&amp;tqId=21308&amp;tPage=5&amp;rp=&amp;ru=%2Fta%2Fhuawei&amp;qru=%2Fta%2Fhuawei%2Fquestion-ranking</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h2&gt;&lt;p&gt;给出一个字符串S，求S的最长回文子串的长度。&lt;/p&gt;
&lt;p&gt;例：字符串“ASDFGHGFDSB”的最长回文子串为“SDFGHGFDS”，长度为9。&lt;/p&gt;
&lt;p&gt;显然暴力解法的不仅复杂度较大，而且超级繁琐，采用动态规划可以更好的解决这类问题&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="https://xxyxt.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="动态规划" scheme="https://xxyxt.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>01背包问题</title>
    <link href="https://xxyxt.github.io/2019/01/11/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://xxyxt.github.io/2019/01/11/01背包问题/</id>
    <published>2019-01-11T05:34:52.000Z</published>
    <updated>2019-01-11T12:26:57.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>问题：有n件物品，每件物品重量为w[ i ]，价值为c[ i ]。现有一个容量为V的背包，问如何选取物品放入背包，使背包总价值最大，其中每个物品只有一件。<br><a id="more"></a><br>样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=5 V=8</span><br><span class="line">3 5 1 2 2 // w[ i ]</span><br><span class="line">4 5 2 1 3 / / c[ i ]</span><br></pre></td></tr></table></figure></p><p>显然，对于每件物品有两种选择，暴力解法复杂度为O($2^n$)<br>用dp[i][v]表示第i件物品放入容量为v的背包，则dp[i][v]的值求解有两种选择：</p><ol><li>不放入第i件物品，那么问题转化为前i-1件物品放入容量为v的背包获得的最大价值，dp[ i-1 ][ v ]</li><li>放入第i件物品，那么问题转化为前i-1件物品放入容量为v-w[i]的背包获得的最大价值<br>dp[ i-1][ v-w[ i ] ]+c[ i ]</li></ol><p><strong>公式为</strong>：dp[ i ][ v ] = max{ dp[ i-1 ][ v ], dp[ i-1 ][ v - w[ i ] ] + c[ i ] }<br>第i件物品的状态，只与第i-1件物品的状态有关，所以可以通过边界dp[0][v]=0(0&lt;=v&lt;=V)，递推得到整个数组</p><h4 id="二维数组实现代码："><a href="#二维数组实现代码：" class="headerlink" title="二维数组实现代码："></a>二维数组实现代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int v=w[i];w[i]&lt;V;v++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][v]=max(dp[i-1][v],dp[i-1][v-w[i]]+c[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样计算得出的dp[ n ][ V ]的值即为最大值</strong><br>其实上面的代码还可以在空间复杂度上进行优化，可以看出，在计算dp[i+1][v]的值时，dp[i-1][v]的值没有用到，因此不妨直接用一维数组来代替二维数组，枚举方向从1到n,v从V到0，状态转移方程变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[ v ] = max(dp[ v ],dp[ v-w[ i ]]+c[ i ])</span><br></pre></td></tr></table></figure></p><h4 id="一维数组实现代码："><a href="#一维数组实现代码：" class="headerlink" title="一维数组实现代码："></a>一维数组实现代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 1;i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int v = V; v&gt;=w [ i ]; v--)</span><br><span class="line">&#123;</span><br><span class="line">dp[ v ] = max(dp[ v ], dp[ v - w[ i ]] + c[ i ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样得到的最大值，需要在数组dp里面找出最大值，不是dp[ V ]</strong></p><h2 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h2><p><a href="https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4?tpId=37&amp;tqId=21239&amp;tPage=1&amp;rp=&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4?tpId=37&amp;tqId=21239&amp;tPage=1&amp;rp=&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;01背包问题&quot;&gt;&lt;a href=&quot;#01背包问题&quot; class=&quot;headerlink&quot; title=&quot;01背包问题&quot;&gt;&lt;/a&gt;01背包问题&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;问题：有n件物品，每件物品重量为w[ i ]，价值为c[ i ]。现有一个容量为V的背包，问如何选取物品放入背包，使背包总价值最大，其中每个物品只有一件。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://xxyxt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="动态规划" scheme="https://xxyxt.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>安装pyinstaller报错</title>
    <link href="https://xxyxt.github.io/2019/01/11/%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/"/>
    <id>https://xxyxt.github.io/2019/01/11/安装报错/</id>
    <published>2019-01-11T02:28:47.000Z</published>
    <updated>2019-01-11T02:35:45.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装pyinstaller报错：Python-library-not-in-binary-dependencies"><a href="#安装pyinstaller报错：Python-library-not-in-binary-dependencies" class="headerlink" title="安装pyinstaller报错：Python library not in binary dependencies"></a>安装pyinstaller报错：Python library not in binary dependencies</h2><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>Centos7.0<br>Python3.6<br><a id="more"></a></p><h2 id="pyinstaller安装"><a href="#pyinstaller安装" class="headerlink" title="pyinstaller安装"></a>pyinstaller安装</h2><p>照着网上的一些教程安装了pyinstaller</p><pre><code>pip3 installer pyinstaller</code></pre><p>   将pyinstaller的路径添加到环境变量</p><pre><code>export PATH=$PATH:/usr/local/python3/lib/python3.6/site-packages</code></pre><p>修改配置文件，将上一条命令写入  /etc/profile 文件</p><pre><code>vi /etc/profile</code></pre><p>然后装完之后开始使用，试着打包自己刚刚写的一个py文件</p><pre><code>pyinstaller ex14.py</code></pre><p>然后就开始报错</p><pre><code>[root@VM_0_13_centos python_ex]# pyinstaller -F ex41.pyOSError: Python library not found: libpython3.6mu.so.1.0, libpython3.6.so.1.0, libpython3.6m.so.1.0This would mean your Python installation doesn&apos;t come with proper library files.This usually happens by missing development package, or unsuitable build parameters of Python installation.On Debian/Ubuntu, you would need to install Python development packages  * apt-get install python3-dev  * apt-get install python-dev  *  If you&apos;re building Python by yourself, please rebuild your Python with `--enable-shared` (or, `--enable-framework` on Darwin)</code></pre><p>解决办法<br>1打开  /etc/ld.so.conf 写入<br>/usr/local/lib64<br>/usr/local/lib</p><pre><code>vi /etc/ld.so.conf</code></pre><p>2</p><pre><code>ldconfig</code></pre><p>3</p><pre><code>pyinstaller ex14.py</code></pre><p>这样就解决问题了<br><img src="https://img-blog.csdn.net/20180927004219612?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzEyMzkwMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装pyinstaller报错：Python-library-not-in-binary-dependencies&quot;&gt;&lt;a href=&quot;#安装pyinstaller报错：Python-library-not-in-binary-dependencies&quot; class=&quot;headerlink&quot; title=&quot;安装pyinstaller报错：Python library not in binary dependencies&quot;&gt;&lt;/a&gt;安装pyinstaller报错：Python library not in binary dependencies&lt;/h2&gt;&lt;h2 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h2&gt;&lt;p&gt;Centos7.0&lt;br&gt;Python3.6&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://xxyxt.github.io/categories/python/"/>
    
    
      <category term="经验" scheme="https://xxyxt.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用Github+Hexo搭建自己的博客</title>
    <link href="https://xxyxt.github.io/2019/01/08/%E4%BD%BF%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xxyxt.github.io/2019/01/08/使用Github-Hexo搭建自己的博客/</id>
    <published>2019-01-08T12:09:04.420Z</published>
    <updated>2019-01-12T07:00:52.542Z</updated>
    
    <content type="html"><![CDATA[<p>我的电脑是win10    64位的</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><strong>前期准备</strong></h2><ul><li>去官网下载Node.js文件，下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>安装完成后，windows运行窗口输入：<code>node -v</code> 会出现版本信息，则安装成功</li></ul><a id="more"></a><ul><li>去官网下载Git安装包，下载地址：<a href="https://www.git-scm.com/download/win" target="_blank" rel="noopener">https://www.git-scm.com/download/win</a><br>按照默认的安装方式，一直点next即可安装成功，默认是安装在C盘，记得修改安装盘符<br>安装完成后，windows运行窗口输入：<code>git --version</code> 会出现版本信息，则安装成功</li></ul><p><strong>注意：安装成功之后，如果输入上述命令，没有出现对应的信息，则将安装路径添加到用户环境变量（我的是F:\Git\cmd)，再次打开运行窗口输入命令即可。</strong></p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p><p><strong>操作如下：</strong></p><ol><li><p>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。</p><ul><li style="list-style: none"><input type="checkbox"> Repository name: xxyxt.github.io</li><li style="list-style: none"><input type="checkbox"> 勾选 Initialize this repository with a README</li><li style="list-style: none"><input type="checkbox"> Create repository</li></ul></li><li>简单地编辑一下 README.md 这个文档。 比如添加：this is a test blog. 保存(Commit changes)。</li><li>打开网页：xxyxt.github.io 这里就可以看到 README.md 里的内容了。</li></ol><p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 xxyxt.github.io 这个网页显示出来。</p><h2 id="hexo-博客框架"><a href="#hexo-博客框架" class="headerlink" title="hexo 博客框架"></a>hexo 博客框架</h2><ul><li><strong>安装hexo</strong></li></ul><p>在准备工作中，我们已经安装了<strong>Node.js</strong>和<strong>Git</strong>，接下来直接安装 hexo 即可</p><ul><li style="list-style: none"><input type="checkbox"> 在windows运行命令窗口中输入 <code>nmp install -g hexo-cli</code></li></ul><ul><li style="list-style: none"><input type="checkbox"> 安装完成后，输入 <code>hexo -v</code></li></ul><p>得到版本信息，即安装成功</p><ul><li><p><strong>设置全局配置 user.name 和 user.email</strong><br>鼠标右击，单击Git bash here，打开命令窗口，输入</p><p>  <code>git config –-global user.name “张三”</code>  //(“”的账号是刚才Github里面自己注册的账号)<br>  <code>git config –-global user.email “1234567@qq.com”</code> //(“”的邮箱是你自己注册的邮箱)</p></li><li><p><strong>生成SSH密钥设置到Github</strong><br><code>cd ~/.ssh</code><br><code>ssh-keygen -t rsa -C “username”</code>  //这里的username为计算机名<br>如果  <code>cd ~/.ssh</code> 显示No such file，可以输入命令 <code>mkdir ~/.ssh</code> 创建一个文件夹，然后执行相应的操作即可，出现下图，则设置成功<img src="https://img-blog.csdnimg.cn/20190108185113300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzEyMzkwMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置ssh key到GitHub 默认生成ssh key在C:\Users\username.ssh文件夹中，用记事本打开 id_rsa.pub文件，复制 i文件内容到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh-&gt;key </p></li><li><p><strong>ssh设置是否成功测试</strong></p><p>  输入命令 <code>ssh -T git@github.com</code> </p></li><li><p><strong>创建本地博客</strong></p></li></ul><ul><li style="list-style: none"><input type="checkbox"> 在D盘下创建文件夹 test</li></ul><ul><li style="list-style: none"><input type="checkbox"> 鼠标右键 test，选择 Git Bash Here</li></ul><ul><li style="list-style: none"><input type="checkbox"> Git Bash 打开之后，所在的位置就是 test 这个文件夹的位置。（/F/test）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 输入 <code>hexo init</code> 将 test文件夹初始化成一个博客文件夹。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 输入 <code>npm install</code> 安装依赖包。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 输入 <code>hexo g</code> 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 输入 <code>hexo s</code> 将生成的网页放在了本地服务器（server）。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 浏览器里输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 回到 Git Bash，按 Ctrl+C 结束。<br>此时再看 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就是无法访问了。</li></ul><p>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号</p><ul><li><strong>发布一篇博客</strong></li></ul><p>如果你按照前面的教程走下来，没有退出刚刚的Git Bash界面，当前路径是刚刚初始化的test路径，输入 <code>hexo new &quot;My First Post&quot;</code></p><ul><li style="list-style: none"><input type="checkbox"> 在<code>F:\test\source_posts</code>路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 回到 Git Bash，输入 <code>hexo g</code> 生成博客</li></ul><ul><li style="list-style: none"><input type="checkbox"> 输入 <code>hexo s</code> 开启服务</li></ul><ul><li style="list-style: none"><input type="checkbox"> 前往 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看成果。</li></ul><ul><li style="list-style: none"><input type="checkbox"> 回到 Git Bash，按 Ctrl+C 结束。如果不结束的话，接口会一直被占用。</li></ul><ul><li><strong>将本地Hexo博客部署在Github上</strong></li></ul><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p><h6 id="操作如下："><a href="#操作如下：" class="headerlink" title="操作如下："></a>操作如下：</h6><ol><li><p>获取 Github 对应的 Repository 的链接。</p><ul><li style="list-style: none"><input type="checkbox"> 登陆 Github，进入到 xxyxt.github.io    </li><li style="list-style: none"><input type="checkbox"> 点击 Clone or download    </li><li style="list-style: none"><input type="checkbox"> 复制 URL 待用，我的是 <a href="https://github.com/xxyxt/xxyxt.github.io.git" target="_blank" rel="noopener">https://github.com/xxyxt/xxyxt.github.io.git</a></li></ul></li></ol><ol start="2"><li><p>修改博客的配置文件</p><ul><li style="list-style: none"><input type="checkbox"> 打开配置文件 /F/test/_config.yml （使用 bash 里的 vi 或者 notepad）</li><li style="list-style: none"><input type="checkbox"> 找到 #Deployment，填入以下内容：<br>deploy:<br>type: git<br>repository: <a href="https://github.com/xxyxt/xxyxt.github.io.git" target="_blank" rel="noopener">https://github.com/xxyxt/xxyxt.github.io.git</a><br>branch: master</li></ul></li></ol><ol start="3"><li>部署</li></ol><ul><li style="list-style: none"><input type="checkbox"> 回到 Git Bash 输入 <code>npm install hexo-deployer-git --save</code> 安装 hexo-deployer-git 此步骤只需要做一次。</li><li style="list-style: none"><input type="checkbox"> 输入 <code>hexo d</code></li><li style="list-style: none"><input type="checkbox"> 得到 INF Deploy done: git 即为部署成功</li></ul><p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p><ol start="4"><li>查看成果</li></ol><p>前往 xxyxt.github.io 即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的电脑是win10    64位的&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;&lt;strong&gt;前期准备&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;去官网下载Node.js文件，下载地址：&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;br&gt;安装完成后，windows运行窗口输入：&lt;code&gt;node -v&lt;/code&gt; 会出现版本信息，则安装成功&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://xxyxt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="博客" scheme="https://xxyxt.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
